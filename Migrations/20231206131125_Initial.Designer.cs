// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sanatorium;

#nullable disable

namespace Sanatorium.Migrations
{
    [DbContext(typeof(sanatoriumContext))]
    [Migration("20231206131125_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sanatorium.Alcoholic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Consciousness")
                        .HasColumnType("boolean")
                        .HasColumnName("consciousness");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("alcoholic", (string)null);
                });

            modelBuilder.Entity("Sanatorium.AlcoholicInspector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    b.Property<int?>("AlcoholicId")
                        .HasColumnType("integer")
                        .HasColumnName("alcoholic_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<int?>("InspectorId")
                        .HasColumnType("integer")
                        .HasColumnName("inspector_id");

                    b.Property<int?>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.HasKey("Id");

                    b.HasIndex("AlcoholicId");

                    b.HasIndex("InspectorId");

                    b.ToTable("alcoholic_inspector", (string)null);
                });

            modelBuilder.Entity("Sanatorium.Bed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.HasKey("Id");

                    b.ToTable("bed", (string)null);
                });

            modelBuilder.Entity("Sanatorium.DrinkProcess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.Property<int?>("DrinkTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("drink_type_id");

                    b.Property<int?>("GroupAlcoholicId")
                        .HasColumnType("integer")
                        .HasColumnName("group_alcoholic_id");

                    b.HasKey("Id");

                    b.ToTable("drink_process", (string)null);
                });

            modelBuilder.Entity("Sanatorium.DrinkType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlcoholDegree")
                        .HasColumnType("integer")
                        .HasColumnName("alcohol_degree");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("drink_type", (string)null);
                });

            modelBuilder.Entity("Sanatorium.EscapeFromBed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlcoholicId")
                        .HasColumnType("integer")
                        .HasColumnName("alcoholic_id");

                    b.Property<int?>("BedId")
                        .HasColumnType("integer")
                        .HasColumnName("bed_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.HasKey("Id");

                    b.HasIndex("AlcoholicId");

                    b.HasIndex("BedId");

                    b.ToTable("escape_from_bed", (string)null);
                });

            modelBuilder.Entity("Sanatorium.Groupa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupName")
                        .HasColumnType("character varying")
                        .HasColumnName("group_name");

                    b.HasKey("Id");

                    b.ToTable("groupa", (string)null);
                });

            modelBuilder.Entity("Sanatorium.GroupAlcoholic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlcoholicId")
                        .HasColumnType("integer")
                        .HasColumnName("alcoholic_id");

                    b.Property<int?>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.HasKey("Id");

                    b.HasIndex("AlcoholicId");

                    b.HasIndex(new[] { "GroupId", "AlcoholicId" }, "group_alcoholic_group_id_alcoholic_id_key")
                        .IsUnique();

                    b.ToTable("group_alcoholic", (string)null);
                });

            modelBuilder.Entity("Sanatorium.Inspector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("inspector", (string)null);
                });

            modelBuilder.Entity("Sanatorium.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("birthdate");

                    b.Property<string>("Email")
                        .HasColumnType("character varying")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("character varying")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("character varying")
                        .HasColumnName("password");

                    b.Property<string>("Sex")
                        .HasColumnType("character varying")
                        .HasColumnName("sex");

                    b.Property<string>("Surname")
                        .HasColumnType("character varying")
                        .HasColumnName("surname");

                    b.HasKey("Id");

                    b.ToTable("person", (string)null);
                });

            modelBuilder.Entity("Sanatorium.PutAlcoholicBed", b =>
                {
                    b.Property<int>("PairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pair_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PairId"));

                    b.Property<int?>("BedId")
                        .HasColumnType("integer")
                        .HasColumnName("bed_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.HasKey("PairId")
                        .HasName("put_alcoholic_bed_pkey");

                    b.HasIndex("BedId");

                    b.ToTable("put_alcoholic_bed", (string)null);
                });

            modelBuilder.Entity("Sanatorium.ReleaseAlcoholicBed", b =>
                {
                    b.Property<int>("PairId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pair_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PairId"));

                    b.Property<int?>("BedId")
                        .HasColumnType("integer")
                        .HasColumnName("bed_id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date");

                    b.HasKey("PairId")
                        .HasName("release_alcoholic_bed_pkey");

                    b.HasIndex("BedId");

                    b.ToTable("release_alcoholic_bed", (string)null);
                });

            modelBuilder.Entity("Sanatorium.Alcoholic", b =>
                {
                    b.HasOne("Sanatorium.Person", "User")
                        .WithMany("Alcoholics")
                        .HasForeignKey("UserId")
                        .HasConstraintName("alcoholic_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sanatorium.AlcoholicInspector", b =>
                {
                    b.HasOne("Sanatorium.Alcoholic", "Alcoholic")
                        .WithMany("AlcoholicInspectors")
                        .HasForeignKey("AlcoholicId")
                        .HasConstraintName("alcoholic_inspector_alcoholic_id_fkey");

                    b.HasOne("Sanatorium.PutAlcoholicBed", "IdNavigation")
                        .WithOne("AlcoholicInspector")
                        .HasForeignKey("Sanatorium.AlcoholicInspector", "Id")
                        .IsRequired()
                        .HasConstraintName("alcoholic_inspector_id_fkey");

                    b.HasOne("Sanatorium.ReleaseAlcoholicBed", "Id1")
                        .WithOne("AlcoholicInspector")
                        .HasForeignKey("Sanatorium.AlcoholicInspector", "Id")
                        .IsRequired()
                        .HasConstraintName("alcoholic_inspector_id_fkey1");

                    b.HasOne("Sanatorium.Inspector", "Inspector")
                        .WithMany("AlcoholicInspectors")
                        .HasForeignKey("InspectorId")
                        .HasConstraintName("alcoholic_inspector_inspector_id_fkey");

                    b.Navigation("Alcoholic");

                    b.Navigation("Id1");

                    b.Navigation("IdNavigation");

                    b.Navigation("Inspector");
                });

            modelBuilder.Entity("Sanatorium.EscapeFromBed", b =>
                {
                    b.HasOne("Sanatorium.Alcoholic", "Alcoholic")
                        .WithMany("EscapeFromBeds")
                        .HasForeignKey("AlcoholicId")
                        .HasConstraintName("escape_from_bed_alcoholic_id_fkey");

                    b.HasOne("Sanatorium.Bed", "Bed")
                        .WithMany("EscapeFromBeds")
                        .HasForeignKey("BedId")
                        .HasConstraintName("escape_from_bed_bed_id_fkey");

                    b.Navigation("Alcoholic");

                    b.Navigation("Bed");
                });

            modelBuilder.Entity("Sanatorium.GroupAlcoholic", b =>
                {
                    b.HasOne("Sanatorium.Alcoholic", "Alcoholic")
                        .WithMany("GroupAlcoholics")
                        .HasForeignKey("AlcoholicId")
                        .HasConstraintName("group_alcoholic_alcoholic_id_fkey");

                    b.HasOne("Sanatorium.Groupa", "Group")
                        .WithMany("GroupAlcoholics")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("group_alcoholic_group_id_fkey");

                    b.Navigation("Alcoholic");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Sanatorium.Inspector", b =>
                {
                    b.HasOne("Sanatorium.Person", "User")
                        .WithMany("Inspectors")
                        .HasForeignKey("UserId")
                        .HasConstraintName("inspector_user_id_fkey");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Sanatorium.PutAlcoholicBed", b =>
                {
                    b.HasOne("Sanatorium.Bed", "Bed")
                        .WithMany("PutAlcoholicBeds")
                        .HasForeignKey("BedId")
                        .HasConstraintName("put_alcoholic_bed_bed_id_fkey");

                    b.Navigation("Bed");
                });

            modelBuilder.Entity("Sanatorium.ReleaseAlcoholicBed", b =>
                {
                    b.HasOne("Sanatorium.Bed", "Bed")
                        .WithMany("ReleaseAlcoholicBeds")
                        .HasForeignKey("BedId")
                        .HasConstraintName("release_alcoholic_bed_bed_id_fkey");

                    b.Navigation("Bed");
                });

            modelBuilder.Entity("Sanatorium.Alcoholic", b =>
                {
                    b.Navigation("AlcoholicInspectors");

                    b.Navigation("EscapeFromBeds");

                    b.Navigation("GroupAlcoholics");
                });

            modelBuilder.Entity("Sanatorium.Bed", b =>
                {
                    b.Navigation("EscapeFromBeds");

                    b.Navigation("PutAlcoholicBeds");

                    b.Navigation("ReleaseAlcoholicBeds");
                });

            modelBuilder.Entity("Sanatorium.Groupa", b =>
                {
                    b.Navigation("GroupAlcoholics");
                });

            modelBuilder.Entity("Sanatorium.Inspector", b =>
                {
                    b.Navigation("AlcoholicInspectors");
                });

            modelBuilder.Entity("Sanatorium.Person", b =>
                {
                    b.Navigation("Alcoholics");

                    b.Navigation("Inspectors");
                });

            modelBuilder.Entity("Sanatorium.PutAlcoholicBed", b =>
                {
                    b.Navigation("AlcoholicInspector")
                        .IsRequired();
                });

            modelBuilder.Entity("Sanatorium.ReleaseAlcoholicBed", b =>
                {
                    b.Navigation("AlcoholicInspector")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
